"""
Gestionnaire central de comp√©tences (skills) pour l'assistant IA.
Charge et orchestre l'utilisation des diff√©rentes comp√©tences.
"""
import os
import importlib
import inspect
import pkgutil
import logging
import asyncio
from typing import Dict, List, Any, Type, Optional

from backend.models.model_manager import model_manager
from backend.config import config
from backend.models.skills.base import Skill

# Importer explicitement les comp√©tences disponibles
from backend.models.skills.weather import WeatherSkill
from backend.models.skills.timer_reminder import TimerReminderSkill
from backend.models.skills.general_qa import GeneralQASkill
from backend.utils.singletons import shared_skill
from backend.utils.startup_log import add_startup_event



logger = logging.getLogger(__name__)

class SkillsManager:
    """
    Gestionnaire central des comp√©tences de l'assistant.
    """
    
    def __init__(self):
        """Initialise le gestionnaire de comp√©tences."""
        self.skills = {}
        self._load_skills()

    
    def _load_skills(self):
        """Charge toutes les comp√©tences disponibles."""
        loaded_skills = []
        # M√©thode manuelle (plus fiable)
        self._register_skill(WeatherSkill)
        loaded_skills.append("weather")

        self.skills[shared_skill.name] = shared_skill
        loaded_skills.append("home_automation")

        self._register_skill(TimerReminderSkill)
        loaded_skills.append("timer_reminder")

        self._register_skill(GeneralQASkill)
        loaded_skills.append("general_qa")
        
        # logger.info(f"‚úÖ Comp√©tences charg√©es: {', '.join(self.skills.keys())}") ## DEBUG
        add_startup_event({"icon": "üß©", "label": "Comp√©tences", "message": ", ".join(loaded_skills)})
    
    def _register_skill(self, skill_class: Type[Skill]):
        """
        Enregistre une classe de comp√©tence.
        
        Args:
            skill_class: Classe de comp√©tence √† enregistrer
        """
        skill_instance = skill_class(self)
        self.skills[skill_instance.name] = skill_instance
        logger.debug(f"Comp√©tence enregistr√©e: {skill_instance.name}")
    
    async def detect_intent(self, query: str) -> Dict[str, Any]:
        """
        D√©tecte l'intention de l'utilisateur.
        
        Args:
            query: Requ√™te de l'utilisateur
            
        Returns:
            Donn√©es d'intention d√©tect√©es
        """
        intent_prompt = f"""Analyse la requ√™te suivante et d√©termine l'intention de l'utilisateur.
Requ√™te: "{query}"

R√©ponds avec un objet JSON contenant les propri√©t√©s suivantes:
- "intent": le type d'intention ("weather", "home_automation", "timer", "reminder", "general_qa", etc.)
- "confidence": niveau de confiance entre 0 et 1
- "entities": un objet avec les entit√©s d√©tect√©es (localisation, appareil, dur√©e, etc.)

Par exemple:
{{
  "intent": "weather",
  "confidence": 0.9,
  "entities": {{ "location": "Paris" }}
}}
"""
        
        try:
            # Utiliser un mod√®le l√©ger pour la d√©tection d'intention
            response = await model_manager.generate_response(intent_prompt, complexity="low")
            
            # Extraire le JSON de la r√©ponse
            import json
            import re
            
            # Rechercher un bloc JSON potentiel
            json_match = re.search(r'({.*})', response.replace('\n', ' '), re.DOTALL)
            
            if json_match:
                json_str = json_match.group(1)
                try:
                    intent_data = json.loads(json_str)
                    logger.info(f"Intention d√©tect√©e: {intent_data.get('intent', 'inconnue')} "
                             f"(confiance: {intent_data.get('confidence', 0.0):.2f})")
                    return intent_data
                except json.JSONDecodeError:
                    logger.warning(f"Impossible de d√©coder la r√©ponse JSON: {json_str}")
            
            # Fallback: d√©tection simple
            intent_data = {
                "intent": "general_qa",
                "confidence": 0.5,
                "entities": {}
            }
            
            # D√©tecter quelques intentions courantes
            query_lower = query.lower()
            
            if any(word in query_lower for word in ["m√©t√©o", "temps", "temp√©rature", "climat"]):
                intent_data["intent"] = "weather"
                intent_data["confidence"] = 0.7
            
            elif any(word in query_lower for word in ["allume", "√©teins", "ouvre", "ferme", "r√®gle"]):
                intent_data["intent"] = "home_automation"
                intent_data["confidence"] = 0.7
            
            elif any(word in query_lower for word in ["minuteur", "timer", "rappelle-moi", "rappel"]):
                intent_data["intent"] = "timer_reminder"
                intent_data["confidence"] = 0.7
            
            logger.info(f"Intention d√©tect√©e (fallback): {intent_data['intent']} "
                     f"(confiance: {intent_data['confidence']:.2f})")
            return intent_data
            
        except Exception as e:
            logger.error(f"Erreur lors de la d√©tection d'intention: {str(e)}")
            return {
                "intent": "general_qa",
                "confidence": 0.5,
                "entities": {}
            }
    
    async def process_query(self, query: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Traite une requ√™te utilisateur en s√©lectionnant la comp√©tence la plus appropri√©e.
        
        Args:
            query: Requ√™te de l'utilisateur
            context: Contexte additionnel pour la requ√™te
            
        Returns:
            R√©sultat du traitement
        """
        # D√©tecter l'intention
        intent_data = await self.detect_intent(query)
        
        # Trouver la comp√©tence la plus appropri√©e
        best_skill = None
        best_score = 0.0
        
        # √âvaluer chaque comp√©tence
        for skill_name, skill in self.skills.items():
            score = await skill.can_handle(query, intent_data)
            logger.debug(f"Comp√©tence {skill_name}: score {score:.2f}")
            
            if score > best_score:
                best_score = score
                best_skill = skill
        
        # Si aucune comp√©tence n'est suffisamment confiante, utiliser la comp√©tence g√©n√©rale
        if best_score < 0.4 or best_skill is None:
            best_skill = self.skills.get("general_qa")
            logger.info("Aucune comp√©tence sp√©cifique trouv√©e, utilisation de la comp√©tence g√©n√©rale")
        
        # Traiter la requ√™te avec la comp√©tence s√©lectionn√©e
        logger.info(f"Traitement de la requ√™te avec la comp√©tence: {best_skill.name} (score: {best_score:.2f})")
        result = await best_skill.handle(query, intent_data, context)
        
        # Ajouter des m√©tadonn√©es sur la comp√©tence utilis√©e
        result["skill"] = best_skill.name
        result["confidence"] = best_score
        
        return result
    
    def get_available_skills(self) -> List[Dict[str, Any]]:
        """
        R√©cup√®re la liste des comp√©tences disponibles.
        
        Returns:
            Liste des comp√©tences avec leurs informations
        """
        skills_info = []
        
        for name, skill in self.skills.items():
            skills_info.append({
                "name": name,
                "description": skill.description,
                "examples": skill.get_examples()
            })
        
        return skills_info

# Instance globale du gestionnaire de comp√©tences
skills_manager = SkillsManager()