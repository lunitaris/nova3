"""
Syst√®me de m√©moire symbolique utilisant un graphe de connaissances simple.
"""
import os
import json
import logging
import time
from typing import Dict, List, Any, Optional, Set, Tuple
from datetime import datetime
import re
import unicodedata

from backend.models.model_manager import model_manager
from backend.utils.profiler import profile
from backend.config import config
from backend.utils.startup_log import add_startup_event
from backend.memory.graph_postprocessor import postprocess_graph



logger = logging.getLogger(__name__)

class SymbolicMemory:
    """
    G√®re la m√©moire symbolique de l'assistant sous forme de graphe simplifi√©.
    Stocke des triplets (sujet, relation, objet) pour repr√©senter des relations.
    """
    
    def __init__(self, storage_path: str = None):
        """
        Initialise le gestionnaire de m√©moire symbolique.
        
        Args:
            storage_path: Chemin de stockage du graphe de connaissances
        """
        self.storage_path = storage_path or os.path.join(config.data_dir, "memories", "symbolic_memory.json")
        self.memory_graph = self._load_graph()
        
        # Initialiser les r√®gles
        self.entity_aliases = {}
        self.entity_types = {}
        self.relation_rewrites = {}
        self.reload_rules()  # Charger les r√®gles dynamiquement
        print(f"[DEBUG] Graph path: {self.storage_path}")

    
    
    def _load_graph(self) -> Dict[str, Any]:
        """Charge le graphe de connaissances existant."""
        if os.path.exists(self.storage_path):
            try:
                with open(self.storage_path, 'r', encoding='utf-8') as f:
                    graph = json.load(f)
                    add_startup_event(f"Graph m√©moire symbolique charg√© ({len(graph.get('entities', {}))} entit√©s)")
                    return graph


            except Exception as e:
                logger.error(f"Erreur lors du chargement du graphe de connaissances: {str(e)}")
                add_startup_event("Graph m√©moire symbolique initialis√© vide (√©chec du chargement)")
                return {"entities": {}, "relations": []}
        return {"entities": {}, "relations": []}


    def _save_graph(self):
        """Sauvegarde le graphe de connaissances avec post-traitement, en cr√©ant un backup."""

        try:
            # üìç 1. Chemin de sauvegarde
            path = self.storage_path

            # üì¶ 2. Sauvegarde le fichier actuel si pr√©sent
            if os.path.exists(path):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M")
                backup_path = path.replace(".json", f"_backup_{timestamp}.json")
                import shutil
                shutil.copy2(path, backup_path)
                logger.info(f"üì¶ Backup m√©moire symbolique cr√©√© : {backup_path}")

            # üîÑ 3. Post-traitement
            from backend.memory.graph_postprocessor import postprocess_graph
            cleaned = postprocess_graph(self.memory_graph)
            self.memory_graph = cleaned

            # üíæ 4. √âcriture du fichier principal
            os.makedirs(os.path.dirname(path), exist_ok=True)
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(self.memory_graph, f, ensure_ascii=False, indent=2)

            logger.info("üíæ Graphe symbolique sauvegard√© avec succ√®s (optimis√©)")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde du graphe symbolique : {str(e)}")


    def _generate_entity_id(self, name: str) -> str:
        """
        G√©n√®re un ID stable et lisible bas√© sur le nom, sans timestamp.
        Si l'ID existe d√©j√†, ajoute un suffixe num√©rique.
        """
        name = unicodedata.normalize("NFD", name)
        name = name.encode("ascii", "ignore").decode("utf-8")
        # Nettoyer le nom (minuscule, accents retir√©s, alphanum uniquement)
        base = re.sub(r'[^a-z0-9]', '_', name.lower())
    

        # S'assurer que l'ID est unique dans le graphe
        entity_ids = set(self.memory_graph.get("entities", {}).keys())
        entity_id = base
        count = 1

        while entity_id in entity_ids:
            entity_id = f"{base}_{count}"
            count += 1

        return entity_id
    
    def add_entity(self, name: str, entity_type: str, attributes: Dict[str, Any] = None, 
                confidence: float = 0.9, valid_from: str = None, valid_to: str = None, batched: bool = False) -> str:

        """
        Ajoute une entit√© au graphe.
        
        Args:
            name: Nom de l'entit√©
            entity_type: Type d'entit√© (person, place, device, concept)
            attributes: Attributs suppl√©mentaires
            confidence: Niveau de confiance (0-1)
            valid_from: Date ISO de d√©but de validit√© (si None, date courante)
            valid_to: Date ISO de fin de validit√© (si None, pas de limite)
            
        Returns:
            ID de l'entit√© ajout√©e
        """
        batched: bool = False
        try:
            # Si valid_from n'est pas sp√©cifi√©, utiliser la date courante
            if valid_from is None:
                valid_from = datetime.now().isoformat()
                
            # V√©rifier si l'entit√© existe d√©j√† par son nom
            existing_id = self.find_entity_by_name(name)
            if existing_id:
                # Cr√©er un historique si l'entit√© existe d√©j√†
                old_data = self.memory_graph["entities"][existing_id].copy()
                
                # V√©rifier si l'historique existe d√©j√†
                if "history" not in self.memory_graph["entities"][existing_id]:
                    self.memory_graph["entities"][existing_id]["history"] = []
                
                # Ajouter l'ancien √©tat √† l'historique
                self.memory_graph["entities"][existing_id]["history"].append({
                    "timestamp": datetime.now().isoformat(),
                    "old_value": {
                        "type": old_data.get("type"),
                        "attributes": old_data.get("attributes", {}),
                        "confidence": old_data.get("confidence"),
                        "valid_from": old_data.get("valid_from"),
                        "valid_to": old_data.get("valid_to")
                    }
                })
                
                # Mettre √† jour l'entit√© existante
                self.memory_graph["entities"][existing_id]["type"] = entity_type
                if attributes:
                    self.memory_graph["entities"][existing_id]["attributes"].update(attributes)
                self.memory_graph["entities"][existing_id]["last_updated"] = datetime.now().isoformat()
                
                # Mettre √† jour les nouveaux champs
                self.memory_graph["entities"][existing_id]["confidence"] = confidence
                self.memory_graph["entities"][existing_id]["valid_from"] = valid_from
                if valid_to:
                    self.memory_graph["entities"][existing_id]["valid_to"] = valid_to
                
                return existing_id
            
            # Cr√©er une nouvelle entit√©
            entity_id = self._generate_entity_id(name)
            self.memory_graph["entities"][entity_id] = {
                "name": name,
                "type": entity_type,
                "attributes": attributes or {},
                "last_updated": datetime.now().isoformat(),
                "confidence": confidence,
                "valid_from": valid_from,
                "history": []  # Historique vide pour les nouvelles entit√©s
            }
            
            # Ajouter valid_to si sp√©cifi√©
            if valid_to:
                self.memory_graph["entities"][entity_id]["valid_to"] = valid_to
            
            if not batched:
                self._save_graph()
                logger.info(f"Entit√© ajout√©e: {name} ({entity_id}) avec confiance {confidence:.2f}")

            return entity_id
            

            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout d'entit√©: {str(e)}")
            return ""
    
    def find_entity_by_name(self, name: str) -> Optional[str]:
        """
        Recherche une entit√© par son nom.
        
        Args:
            name: Nom de l'entit√© √† rechercher
            
        Returns:
            ID de l'entit√© si trouv√©e, None sinon
        """
        name_lower = name.lower()
        for entity_id, entity in self.memory_graph["entities"].items():
            if entity["name"].lower() == name_lower:
                return entity_id
        return None
    
    def add_relation(self, source_id: str, relation: str, target_id: str, 
                    confidence: float = 0.9, valid_from: str = None, valid_to: str = None, batched: bool = False) -> bool:

        """
        Ajoute une relation entre deux entit√©s.
        
        Args:
            source_id: ID de l'entit√© source
            relation: Type de relation
            target_id: ID de l'entit√© cible
            confidence: Niveau de confiance (0-1)
            valid_from: Date ISO de d√©but de validit√© (si None, date courante)
            valid_to: Date ISO de fin de validit√© (si None, pas de limite)
            
        Returns:
            True si la relation a √©t√© ajout√©e avec succ√®s
        """
        try:
            # V√©rifier que les entit√©s existent
            if source_id not in self.memory_graph["entities"] or target_id not in self.memory_graph["entities"]:
                logger.warning(f"Tentative d'ajout de relation avec des entit√©s inexistantes: {source_id}, {target_id}")
                return False
            
            # Si valid_from n'est pas sp√©cifi√©, utiliser la date courante
            if valid_from is None:
                valid_from = datetime.now().isoformat()
                
            # V√©rifier si la relation existe d√©j√†
            for rel in self.memory_graph["relations"]:
                if rel["source"] == source_id and rel["relation"] == relation and rel["target"] == target_id:
                    # Mettre √† jour la relation existante
                    rel["confidence"] = confidence
                    rel["timestamp"] = datetime.now().isoformat()
                    rel["valid_from"] = valid_from
                    if valid_to:
                        rel["valid_to"] = valid_to
                    self._save_graph()
                    return True
            
            # Ajouter la nouvelle relation
            new_relation = {
                "source": source_id,
                "relation": relation,
                "target": target_id,
                "confidence": confidence,
                "timestamp": datetime.now().isoformat(),
                "valid_from": valid_from
            }
            
            # Ajouter valid_to si sp√©cifi√©
            if valid_to:
                new_relation["valid_to"] = valid_to
                
            self.memory_graph["relations"].append(new_relation)
            
            if not batched:
                self._save_graph()
                logger.info(f"Relation ajout√©e: {source_id} -{relation}-> {target_id} avec confiance {confidence:.2f}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de relation: {str(e)}")
            return False
    
    def query_relations(self, entity_id: str, relation_type: Optional[str] = None,
                       include_expired: bool = False) -> List[Dict[str, Any]]:
        """
        Interroge les relations pour une entit√© donn√©e.
        
        Args:
            entity_id: ID de l'entit√©
            relation_type: Type de relation sp√©cifique (optionnel)
            include_expired: Inclure les relations expir√©es
            
        Returns:
            Liste des relations correspondantes
        """
        results = []
        
        try:
            current_date = datetime.now().isoformat()
            
            for rel in self.memory_graph["relations"]:
                # V√©rifier la date de validit√© si on n'inclut pas les relations expir√©es
                if not include_expired and "valid_to" in rel and rel["valid_to"] < current_date:
                    continue
                    
                if rel["source"] == entity_id:
                    if relation_type is None or rel["relation"] == relation_type:
                        # Obtenir des d√©tails suppl√©mentaires
                        target_entity = self.memory_graph["entities"].get(rel["target"], {})
                        results.append({
                            "relation": rel["relation"],
                            "target_id": rel["target"],
                            "target_name": target_entity.get("name", "Inconnu"),
                            "target_type": target_entity.get("type", "inconnu"),
                            "confidence": rel["confidence"],
                            "timestamp": rel["timestamp"],
                            "valid_from": rel.get("valid_from"),
                            "valid_to": rel.get("valid_to")
                        })
                
                # √âgalement inclure les relations o√π l'entit√© est la cible
                elif rel["target"] == entity_id:
                    if relation_type is None or rel["relation"] == relation_type:
                        # Obtenir des d√©tails suppl√©mentaires
                        source_entity = self.memory_graph["entities"].get(rel["source"], {})
                        results.append({
                            "relation": f"reverse_{rel['relation']}",  # Indiquer que c'est la relation inverse
                            "source_id": rel["source"],
                            "source_name": source_entity.get("name", "Inconnu"),
                            "source_type": source_entity.get("type", "inconnu"),
                            "confidence": rel["confidence"],
                            "timestamp": rel["timestamp"],
                            "valid_from": rel.get("valid_from"),
                            "valid_to": rel.get("valid_to")
                        })
            
            return results
            
        except Exception as e:
            logger.error(f"Erreur lors de la requ√™te de relations: {str(e)}")
            return []
    
    def get_all_entities(self, include_expired: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re toutes les entit√©s du graphe avec leurs attributs.
        
        Args:
            include_expired: Inclure les entit√©s expir√©es
            
        Returns:
            Liste de toutes les entit√©s
        """
        entities = []
        current_date = datetime.now().isoformat()
        
        try:
            for entity_id, entity_data in self.memory_graph["entities"].items():
                # V√©rifier la date de validit√© si on n'inclut pas les entit√©s expir√©es
                if not include_expired and "valid_to" in entity_data and entity_data["valid_to"] < current_date:
                    continue
                    
                # Copier l'entit√© et ajouter son ID
                entity_copy = entity_data.copy()
                entity_copy["entity_id"] = entity_id
                
                entities.append(entity_copy)
                
            return entities
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de toutes les entit√©s: {str(e)}")
            return []
    
    def get_all_relations(self, include_expired: bool = False) -> List[Dict[str, Any]]:
        """
        R√©cup√®re toutes les relations du graphe.
        
        Args:
            include_expired: Inclure les relations expir√©es
            
        Returns:
            Liste de toutes les relations avec des informations sur les entit√©s connect√©es
        """
        relations = []
        current_date = datetime.now().isoformat()
        
        try:
            for relation in self.memory_graph["relations"]:
                # V√©rifier la date de validit√© si on n'inclut pas les relations expir√©es
                if not include_expired and "valid_to" in relation and relation["valid_to"] < current_date:
                    continue
                    
                # Enrichir la relation avec des informations sur les entit√©s
                source_entity = self.memory_graph["entities"].get(relation["source"], {})
                target_entity = self.memory_graph["entities"].get(relation["target"], {})
                
                enriched_relation = relation.copy()
                enriched_relation["source_name"] = source_entity.get("name", "Inconnu")
                enriched_relation["target_name"] = target_entity.get("name", "Inconnu")
                
                relations.append(enriched_relation)
                
            return relations
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de toutes les relations: {str(e)}")
            return []
            
    def get_entity_history(self, entity_id: str) -> List[Dict[str, Any]]:
        """
        R√©cup√®re l'historique complet d'une entit√©.
        
        Args:
            entity_id: ID de l'entit√©
            
        Returns:
            Liste des changements historiques de l'entit√©
        """
        try:
            if entity_id not in self.memory_graph["entities"]:
                return []
                
            entity = self.memory_graph["entities"][entity_id]
            
            # Commencer par l'√©tat actuel
            history = [{
                "timestamp": entity.get("last_updated"),
                "state": {
                    "name": entity.get("name"),
                    "type": entity.get("type"),
                    "attributes": entity.get("attributes", {}),
                    "confidence": entity.get("confidence"),
                    "valid_from": entity.get("valid_from"),
                    "valid_to": entity.get("valid_to")
                }
            }]
            
            # Ajouter l'historique sauvegard√©
            if "history" in entity:
                for entry in entity["history"]:
                    history.append({
                        "timestamp": entry.get("timestamp"),
                        "state": entry.get("old_value", {})
                    })
            
            # Trier par timestamp, plus r√©cent d'abord
            history.sort(key=lambda x: x.get("timestamp", ""), reverse=True)
            
            return history
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de l'historique de l'entit√© {entity_id}: {str(e)}")
            return []
    


    async def update_graph_from_text(self, text: str, confidence: float = 0.7, valid_from: str = None, valid_to: str = None) -> Dict[str, int]:
        """
        (M√©thode d√©sactiv√©e) Anciennement utilis√©e pour enrichir le graphe √† partir d‚Äôun texte via LLM local.

        
        Args:
            text: Texte √† analyser
            confidence: Niveau de confiance par d√©faut
            valid_from: Date ISO de d√©but de validit√© (si None, date courante)
            valid_to: Date ISO de fin de validit√© (si None, pas de limite)
            
        Returns:
            Statistiques sur les mises √† jour (entit√©s et relations ajout√©es)
        """
        try:
            # 1. Extraire les entit√©s et les ajouter au graphe
            logger.warning("‚è≠Ô∏è extract_entities_from_text d√©sactiv√© (LLM call supprim√©)")
            return {
                "entities_added": 0,
                "relations_added": 0
            }
            
            entity_ids = {}
            entities_added = 0
            
            for entity in extracted_entities:
                entity_id = self.add_entity(
                    name=entity["name"],
                    entity_type=entity["type"],
                    confidence=entity.get("confidence", confidence),
                    valid_from=valid_from,
                    valid_to=valid_to,
                    batched=True
                )
                if entity_id:
                    entity_ids[entity["name"]] = entity_id
                    entities_added += 1
            
            # 2. Extraire les relations et les ajouter au graphe
            extracted_relations = await self.extract_relations_from_text(text, confidence=confidence)
            
            # Log d√©taill√© des relations extraites
            logger.info(f"Relations extraites ({len(extracted_relations)}): {json.dumps(extracted_relations, ensure_ascii=False)}")
            logger.info(f"Entit√©s disponibles: {entity_ids}")
            
            relations_added = 0
            failed_relations = []
            
            for relation in extracted_relations:
                source_name = relation.get("source")
                target_name = relation.get("target")
                relation_type = relation.get("relation")
                
                logger.debug(f"Traitement relation: {source_name} -{relation_type}-> {target_name}")
                
                # V√©rifier que les entit√©s existent
                if source_name in entity_ids and target_name in entity_ids:
                    source_id = entity_ids[source_name]
                    target_id = entity_ids[target_name]
                    
                    relation_confidence = relation.get("confidence", confidence)
                    success = self.add_relation(
                        source_id=source_id, 
                        relation=relation_type, 
                        target_id=target_id, 
                        confidence=relation_confidence,
                        valid_from=valid_from, 
                        valid_to=valid_to,
                        batched=True
                    )
                    
                    if success:
                        relations_added += 1
                        logger.debug(f"Relation ajout√©e: {source_name} ({source_id}) -{relation_type}-> {target_name} ({target_id})")
                    else:
                        failed_relations.append(f"{source_name} -> {target_name}")
                else:
                    # Entit√©s non trouv√©es, on les cr√©e au besoin
                    if source_name not in entity_ids:
                        logger.debug(f"Entit√© source '{source_name}' non trouv√©e, cr√©ation automatique")
                        source_id = self.add_entity(
                            name=source_name,
                            entity_type="concept",  # Type par d√©faut
                            confidence=confidence * 0.8,  # Confiance r√©duite car entit√© implicite
                            valid_from=valid_from,
                            valid_to=valid_to
                        )
                        if source_id:
                            entity_ids[source_name] = source_id
                    else:
                        source_id = entity_ids[source_name]
                        
                    if target_name not in entity_ids:
                        logger.debug(f"Entit√© cible '{target_name}' non trouv√©e, cr√©ation automatique")
                        target_id = self.add_entity(
                            name=target_name,
                            entity_type="concept",  # Type par d√©faut
                            confidence=confidence * 0.8,  # Confiance r√©duite car entit√© implicite
                            valid_from=valid_from,
                            valid_to=valid_to
                        )
                        if target_id:
                            entity_ids[target_name] = target_id
                    else:
                        target_id = entity_ids[target_name]
                    
                    # Ajouter la relation si les deux entit√©s ont √©t√© cr√©√©es
                    if source_id and target_id:
                        relation_confidence = relation.get("confidence", confidence) * 0.8  # Confiance r√©duite
                        if self.add_relation(
                            source_id=source_id, 
                            relation=relation_type, 
                            target_id=target_id, 
                            confidence=relation_confidence,
                            valid_from=valid_from, 
                            valid_to=valid_to
                        ):
                            relations_added += 1
                            logger.debug(f"Relation ajout√©e apr√®s cr√©ation d'entit√©s: {source_name} ({source_id}) -{relation_type}-> {target_name} ({target_id})")
            
            if failed_relations:
                logger.warning(f"√âchec d'ajout pour {len(failed_relations)} relations: {', '.join(failed_relations)}")
            
            self._save_graph()

            return {
                "entities_added": entities_added,
                "relations_added": relations_added
            }
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du graphe: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return {
                "entities_added": 0,
                "relations_added": 0,
                "error": str(e)
            }



    def get_context_for_query(self, query: str, max_results: int = 3) -> str:
        """
        R√©cup√®re le contexte pertinent du graphe pour une requ√™te.
        
        Args:
            query: Requ√™te utilisateur
            max_results: Nombre maximal de r√©sultats
            
        Returns:
            Contexte format√© pour le prompt
        """
        try:
            relevant_entities = []
            
            # Recherche simple par correspondance de noms
            for entity_id, entity in self.memory_graph["entities"].items():
                if entity["name"].lower() in query.lower():
                    relevant_entities.append({
                        "id": entity_id,
                        "name": entity["name"],
                        "type": entity["type"],
                        "attributes": entity["attributes"]
                    })
            
            # Limiter le nombre de r√©sultats
            relevant_entities = relevant_entities[:max_results]
            
            if not relevant_entities:
                return ""
            
            # R√©cup√©rer les relations pour chaque entit√©
            context = "Informations du graphe de connaissances:\n"
            
            for entity in relevant_entities:
                context += f"\n- {entity['name']} ({entity['type']}):\n"
                
                # Ajouter les attributs
                if entity["attributes"]:
                    context += "  Attributs:\n"
                    for key, value in entity["attributes"].items():
                        context += f"    - {key}: {value}\n"
                
                # Ajouter les relations
                relations = self.query_relations(entity["id"])
                if relations:
                    context += "  Relations:\n"
                    for rel in relations[:5]:  # Limiter √† 5 relations par entit√©
                        if "target_name" in rel:
                            context += f"    - {rel['relation']} {rel['target_name']}\n"
                        elif "source_name" in rel:
                            context += f"    - {rel['source_name']} {rel['relation'].replace('reverse_', '')}\n"
            
            return context
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration du contexte du graphe: {str(e)}")
            return ""




    def reload_rules(self):
        """
        Recharge les r√®gles de post-traitement depuis le fichier de r√®gles.
        """
        try:
            rules_path = os.path.join(config.data_dir, "memories", "symbolic_rules.json")
            if os.path.exists(rules_path):
                with open(rules_path, 'r', encoding='utf-8') as f:
                    rules = json.load(f)
                    
                    # Mettre √† jour les r√®gles en m√©moire
                    self.entity_aliases = rules.get("entity_aliases", {})
                    self.entity_types = rules.get("entity_types", {})
                    self.relation_rewrites = rules.get("relation_rewrites", {})
                    
                    logger.info("R√®gles symboliques recharg√©es avec succ√®s")
                    return True
        except Exception as e:
            logger.error(f"Erreur lors du rechargement des r√®gles: {str(e)}")
        
        return False



# Instance globale du gestionnaire de m√©moire symbolique
symbolic_memory = SymbolicMemory()




##########################################################################################

